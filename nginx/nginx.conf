user  www-data;
worker_processes  auto;
worker_rlimit_nofile 100000;

error_log  /media/data/logs/error.log error;
pid        /var/run/nginx.pid;

include /etc/nginx/modules/*.conf;

events {
	worker_connections  4096;
	use epoll;
	multi_accept off;
}

include /media/data/streams/*.conf;

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format  main  '[$time_iso8601] $remote_addr - $remote_user - "$host" "$request" $status "$http_referer" "$http_user_agent" prot:$scheme';
    log_format upstream_logging '[$time_iso8601] $remote_addr - $remote_user - "$host" "$request" $status "$http_referer" "$http_user_agent" prot:$scheme -> $upstream_addr ($upstream_status) location: $upstream_http_location';
    access_log  /media/data/logs/access.log  main;

    # Optimze Transfer
    sendfile on; # copies data between one FD and other from within the kernel
    tcp_nopush on; # send headers in one piece, it is better than sending them one by one
    tcp_nodelay on; # don't buffer data sent, good for small data bursts in real time
    keepalive_timeout 30s; # server will close connection after this time -- default 75
    keepalive_requests 10000;  # number of requests client can make over keep-alive -- for testing environment
    reset_timedout_connection on; # allow the server to close connection on non responding client, this will free up memory

    # Open File Settings
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 5;
    open_file_cache_errors off;

    # Client Settings
    client_body_buffer_size    128k;
    client_max_body_size       50m;
    client_header_buffer_size    1k;
    client_header_timeout  15s;
    client_body_timeout    15s;    
    send_timeout 10s; # if client stop responding, free up memory -- default 60
    large_client_header_buffers  4 256k;
    output_buffers   4 32k;
    postpone_output  1460;	

    # Rate Limit (https://serverfault.com/questions/873046/how-to-limit-tcp-connections-with-nginx-for-http-2)
    map $http2 $v1ip {
    	default "";
    	""  $binary_remote_addr;
    }
    map $http2 $v2ip {
    	default $binary_remote_addr;
        "" "";
    }

    limit_conn_zone $v1ip zone=v1ips:10m;
    limit_conn_zone $v2ip zone=v2ips:20m;

    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=50r/s;
	
    # Other Settings
    # lua_load_resty_core off;
    gzip  off;
    types_hash_max_size 2048; # internal parameter to speed up hashtable lookups
    server_tokens off;
	
	resolver 127.0.0.11 valid=5s;
	
    include /media/data/sites-enabled/*.conf;
	
	lua_load_resty_core off;
	lua_code_cache on;
	
	lua_shared_dict prometheus_metrics 10M;
	lua_package_path "/usr/share/lua/common/resty/?.lua;/etc/nginx/lua_modules/?.lua;/media/data/lua/?.lua;;";

    init_worker_by_lua_block {
		prometheus = require("prometheus").init("prometheus_metrics")
		metric_requests = prometheus:counter(
			"nginx_http_requests_total", "Number of HTTP requests", {"nginx_host", "nginx_status"})
		metric_latency = prometheus:histogram(
			"nginx_http_request_duration_seconds", "HTTP request latency", {"nginx_host", "nginx_status"})
		metric_connections = prometheus:gauge(
			"nginx_http_connections", "Number of HTTP connections", {"nginx_state"})
    }
	
    log_by_lua_block {
		metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
		metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name, ngx.var.status})
    }

    server {
        listen          4444;
        listen          [::]:4444;
        server_name     localhost;
		
		location /metrics {
			content_by_lua_block {
				metric_connections:set(ngx.var.connections_reading, {"reading"})
				metric_connections:set(ngx.var.connections_waiting, {"waiting"})
				metric_connections:set(ngx.var.connections_writing, {"writing"})
				prometheus:collect()
			}
		}

        location /health {
            # MIME type determined by default_type:
            default_type 'text/plain';
            return 200;
            access_log off;
         }

         location /nginx_status {
            stub_status on;
		}
    }
}
