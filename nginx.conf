user  www-data;
worker_processes  auto;
worker_rlimit_nofile 100000;

error_log  /media/data/logs/error.log warn;
pid        /var/run/nginx.pid;

include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections  4096;
	use epoll;
	multi_accept off;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

	# Logging
    log_format  main  '[$time_iso8601] $remote_addr - $remote_user - "$host" "$request" $status body:$body_bytes_sent bytes "$http_referer" "$http_user_agent" prot:$scheme';
    access_log  /media/data/logs/access.log  main;

	# Optimze Transfer
    sendfile on; # copies data between one FD and other from within the kernel
    tcp_nopush on; # send headers in one piece, it is better than sending them one by one
    tcp_nodelay on; # don't buffer data sent, good for small data bursts in real time
    keepalive_timeout 30s; # server will close connection after this time -- default 75
    keepalive_requests 10000;  # number of requests client can make over keep-alive -- for testing environment
	reset_timedout_connection on; # allow the server to close connection on non responding client, this will free up memory

    # Open File Settings
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 5;
    open_file_cache_errors off;

    # Client Settings
    client_body_buffer_size    128k;
    client_max_body_size       50m;
    client_header_buffer_size    1k;
    client_header_timeout  15s;
    client_body_timeout    15s;    
	send_timeout 10s; # if client stop responding, free up memory -- default 60
    large_client_header_buffers  4 256k;
    output_buffers   4 32k;
    postpone_output  1460;	

    # Rate Limit
    limit_req_zone $binary_remote_addr zone=perip:10m rate=45r/m;
	
	# Other Settings
	lua_load_resty_core off;
	gzip  off;
	types_hash_max_size 2048; # internal parameter to speed up hashtable lookups
    server_tokens off;
	
	include /media/data/sites-enabled/*;
	
	server {
		listen          4444;
		listen          [::]:4444;
		server_name     localhost;

		
			location /health {
				# MIME type determined by default_type:
				default_type 'text/plain';

				content_by_lua_block {
					ngx.say('Nginx OK')
				}
			}
		}
}
